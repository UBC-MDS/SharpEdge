import pytest
import numpy as np
import warnings
from sharpedge.modulate_image import modulate_image

@pytest.fixture
def sample_images():
    # Create sample images for testing
    img_rgb_5 = np.random.randint(0, 256, (5, 5, 3), dtype=np.uint8)  # RGB image (5x5) with 3 channels
    img_gray_5 = np.random.randint(0, 256, (5, 5), dtype=np.uint8)  # Grayscale image (5x5)
    img_rgb_10_5 = np.random.randint(0, 256, (10, 5, 3), dtype=np.uint8)  # RGB image (10x5) with 3 channels
    img_gray_10_5 = np.random.randint(0, 256, (10, 5), dtype=np.uint8)  # Grayscale image (10x5)
    return img_rgb_5, img_gray_5, img_rgb_10_5, img_gray_10_5

# Expected Test Cases:
@pytest.mark.parametrize(
    "test_img, mode, ch_swap, ch_extract, expected_shape",
    [
        (img_gray_10_5, 'rgb', None, None, (10, 5, 3)),  # Grayscale image (10x5) to RGB
        (img_rgb_10_5, 'gray', None, None, (10, 5)),  # RGB image (10x5) to grayscale
        (img_gray_5, 'rgb', [2, 1, 0], None, (5, 5, 3)),  # RGB image (5x5) to RGB
        (img_rgb_5, 'gray', (5, 5)),  # Grayscale image (5x5) to grayscale
    ]
)
def test_valid_inputs(test_img, mode, expected_shape):
    result = modulate_image(test_img, mode=mode)
    assert result.shape == expected_shape

# Edge Cases:
@pytest.mark.parametrize(
    "img, mode, expected_warning",
    [
        ('rgb', 'rgb', "Input is already RGB. No conversion needed."),  # RGB to RGB (no change)
        ('gray', 'gray', "Input is already grayscale. No conversion needed.")  # Grayscale to Grayscale (no change)
    ]
)
def test_edge_cases(sample_images, img, mode, expected_warning):
    img_rgb, img_gray = sample_images
    
    # Select the image based on the mode
    if img == 'rgb':
        test_img = img_rgb
    else:
        test_img = img_gray

    with pytest.warns(UserWarning, match=expected_warning):
        result = modulate_image(test_img, mode=mode)

# Error Cases: These are the cases where the function should raise errors
@pytest.mark.parametrize(
    "img, mode, ch_extract, ch_swap, expected_exception",
    [
        # Invalid mode
        ('rgb', 'invalid_mode', None, None, ValueError),  # Invalid mode value
        # Invalid ch_extract
        ('rgb', 'rgb', [3], None, ValueError),  # Invalid channel index in ch_extract
        ('rgb', 'rgb', 'wrong_type', None, TypeError),  # ch_extract should be a list/tuple
        # Invalid ch_swap
        ('rgb', 'rgb', None, [0, 1], ValueError),  # Invalid ch_swap (not enough elements)
        ('rgb', 'rgb', None, [0, 1, 3], ValueError),  # Invalid ch_swap (index out of range)
        ('rgb', 'rgb', None, [0, 1, 1], ValueError),  # Invalid ch_swap (duplicate indices)
        ('gray', 'rgb', None, [0, 1, 2], UserWarning),  # Trying to swap channels on grayscale
    ]
)
def test_error_cases(sample_images, img, mode, ch_extract, ch_swap, expected_exception):
    img_rgb, img_gray = sample_images

    # Select the image based on the mode
    if img == 'rgb':
        test_img = img_rgb
    else:
        test_img = img_gray

    if ch_extract is not None:
        with pytest.raises(expected_exception):
            modulate_image(test_img, mode=mode, ch_extract=ch_extract, ch_swap=ch_swap)
    else:
        with pytest.raises(expected_exception):
            modulate_image(test_img, mode=mode, ch_extract=ch_extract, ch_swap=ch_swap)

